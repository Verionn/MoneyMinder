/*
 * MoneyMinder - Rest api
 * Api for MoneyMinder project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateItemRequestBody;
import org.openapitools.client.model.GetAllItemsFromSpecificList200Response;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.ItemRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addNewItemToSpecificList
     * @param listId ID of the list (required)
     * @param createItemRequestBody Add new item body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added new item to specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong new item request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewItemToSpecificListCall(Integer listId, CreateItemRequestBody createItemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createItemRequestBody;

        // create path and map variables
        String localVarPath = "/lists/{listId}/items"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewItemToSpecificListValidateBeforeCall(Integer listId, CreateItemRequestBody createItemRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addNewItemToSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = addNewItemToSpecificListCall(listId, createItemRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add new item to specific list
     * @param listId ID of the list (required)
     * @param createItemRequestBody Add new item body (optional)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added new item to specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong new item request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or category not found </td><td>  -  </td></tr>
     </table>
     */
    public Item addNewItemToSpecificList(Integer listId, CreateItemRequestBody createItemRequestBody) throws ApiException {
        ApiResponse<Item> localVarResp = addNewItemToSpecificListWithHttpInfo(listId, createItemRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Add new item to specific list
     * @param listId ID of the list (required)
     * @param createItemRequestBody Add new item body (optional)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added new item to specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong new item request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or category not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> addNewItemToSpecificListWithHttpInfo(Integer listId, CreateItemRequestBody createItemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = addNewItemToSpecificListValidateBeforeCall(listId, createItemRequestBody, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add new item to specific list
     * @param listId ID of the list (required)
     * @param createItemRequestBody Add new item body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added new item to specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong new item request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addNewItemToSpecificListAsync(Integer listId, CreateItemRequestBody createItemRequestBody, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewItemToSpecificListValidateBeforeCall(listId, createItemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSpecificItemFromSpecificList
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpecificItemFromSpecificListCall(Integer listId, Integer itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{listId}/items/{itemId}"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificItemFromSpecificListValidateBeforeCall(Integer listId, Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteSpecificItemFromSpecificList(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteSpecificItemFromSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSpecificItemFromSpecificListCall(listId, itemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSpecificItemFromSpecificList(Integer listId, Integer itemId) throws ApiException {
        deleteSpecificItemFromSpecificListWithHttpInfo(listId, itemId);
    }

    /**
     * 
     * Delete specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSpecificItemFromSpecificListWithHttpInfo(Integer listId, Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificItemFromSpecificListValidateBeforeCall(listId, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpecificItemFromSpecificListAsync(Integer listId, Integer itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificItemFromSpecificListValidateBeforeCall(listId, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllItemsFromSpecificList
     * @param listId ID of the list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned all items from specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllItemsFromSpecificListCall(Integer listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{listId}/items"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllItemsFromSpecificListValidateBeforeCall(Integer listId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getAllItemsFromSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = getAllItemsFromSpecificListCall(listId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return all items from specific list
     * @param listId ID of the list (required)
     * @return GetAllItemsFromSpecificList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned all items from specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllItemsFromSpecificList200Response getAllItemsFromSpecificList(Integer listId) throws ApiException {
        ApiResponse<GetAllItemsFromSpecificList200Response> localVarResp = getAllItemsFromSpecificListWithHttpInfo(listId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return all items from specific list
     * @param listId ID of the list (required)
     * @return ApiResponse&lt;GetAllItemsFromSpecificList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned all items from specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllItemsFromSpecificList200Response> getAllItemsFromSpecificListWithHttpInfo(Integer listId) throws ApiException {
        okhttp3.Call localVarCall = getAllItemsFromSpecificListValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<GetAllItemsFromSpecificList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return all items from specific list
     * @param listId ID of the list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned all items from specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllItemsFromSpecificListAsync(Integer listId, final ApiCallback<GetAllItemsFromSpecificList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllItemsFromSpecificListValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<GetAllItemsFromSpecificList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for markItemAsPurchased
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully purchased item - item has been moved to another table </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markItemAsPurchasedCall(Integer listId, Integer itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{listId}/items/{itemId}/purchased"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markItemAsPurchasedValidateBeforeCall(Integer listId, Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling markItemAsPurchased(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling markItemAsPurchased(Async)");
        }
        

        okhttp3.Call localVarCall = markItemAsPurchasedCall(listId, itemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Mark item as purchased
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully purchased item - item has been moved to another table </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public void markItemAsPurchased(Integer listId, Integer itemId) throws ApiException {
        markItemAsPurchasedWithHttpInfo(listId, itemId);
    }

    /**
     * 
     * Mark item as purchased
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully purchased item - item has been moved to another table </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> markItemAsPurchasedWithHttpInfo(Integer listId, Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = markItemAsPurchasedValidateBeforeCall(listId, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Mark item as purchased
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully purchased item - item has been moved to another table </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call markItemAsPurchasedAsync(Integer listId, Integer itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markItemAsPurchasedValidateBeforeCall(listId, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnSpecificItemFromSpecificList
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnSpecificItemFromSpecificListCall(Integer listId, Integer itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{listId}/items/{itemId}"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnSpecificItemFromSpecificListValidateBeforeCall(Integer listId, Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling returnSpecificItemFromSpecificList(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling returnSpecificItemFromSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = returnSpecificItemFromSpecificListCall(listId, itemId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public Item returnSpecificItemFromSpecificList(Integer listId, Integer itemId) throws ApiException {
        ApiResponse<Item> localVarResp = returnSpecificItemFromSpecificListWithHttpInfo(listId, itemId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> returnSpecificItemFromSpecificListWithHttpInfo(Integer listId, Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = returnSpecificItemFromSpecificListValidateBeforeCall(listId, itemId, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned item </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnSpecificItemFromSpecificListAsync(Integer listId, Integer itemId, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnSpecificItemFromSpecificListValidateBeforeCall(listId, itemId, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpecificItemFromSpecificList
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param itemRequestBody Update item body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecificItemFromSpecificListCall(Integer listId, Integer itemId, ItemRequestBody itemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemRequestBody;

        // create path and map variables
        String localVarPath = "/lists/{listId}/items/{itemId}"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificItemFromSpecificListValidateBeforeCall(Integer listId, Integer itemId, ItemRequestBody itemRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateSpecificItemFromSpecificList(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateSpecificItemFromSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = updateSpecificItemFromSpecificListCall(listId, itemId, itemRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param itemRequestBody Update item body (optional)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public Item updateSpecificItemFromSpecificList(Integer listId, Integer itemId, ItemRequestBody itemRequestBody) throws ApiException {
        ApiResponse<Item> localVarResp = updateSpecificItemFromSpecificListWithHttpInfo(listId, itemId, itemRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Update specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param itemRequestBody Update item body (optional)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> updateSpecificItemFromSpecificListWithHttpInfo(Integer listId, Integer itemId, ItemRequestBody itemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificItemFromSpecificListValidateBeforeCall(listId, itemId, itemRequestBody, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update specific item from specific list
     * @param listId ID of the list (required)
     * @param itemId ID of the item (required)
     * @param itemRequestBody Update item body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated item </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List or Item not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecificItemFromSpecificListAsync(Integer listId, Integer itemId, ItemRequestBody itemRequestBody, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificItemFromSpecificListValidateBeforeCall(listId, itemId, itemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
