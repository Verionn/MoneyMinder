/*
 * MoneyMinder - Rest api
 * Api for MoneyMinder project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAllLists200Response;
import org.openapitools.client.model.ListRequestBody;
import org.openapitools.client.model.ModelList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ListsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ListsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNewList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created new list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createNewListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Create new list
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created new list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request body </td><td>  -  </td></tr>
     </table>
     */
    public ModelList createNewList() throws ApiException {
        ApiResponse<ModelList> localVarResp = createNewListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Create new list
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created new list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> createNewListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createNewListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new list
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created new list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewListAsync(final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSpecificList
     * @param listId ID of the list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpecificListCall(Integer listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{listId}"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificListValidateBeforeCall(Integer listId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling deleteSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSpecificListCall(listId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete specific list
     * @param listId ID of the list (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSpecificList(Integer listId) throws ApiException {
        deleteSpecificListWithHttpInfo(listId);
    }

    /**
     * 
     * Delete specific list
     * @param listId ID of the list (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSpecificListWithHttpInfo(Integer listId) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificListValidateBeforeCall(listId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete specific list
     * @param listId ID of the list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpecificListAsync(Integer listId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificListValidateBeforeCall(listId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllLists
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all lists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllListsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllListsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllListsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get all lists
     * @return GetAllLists200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all lists </td><td>  -  </td></tr>
     </table>
     */
    public GetAllLists200Response getAllLists() throws ApiException {
        ApiResponse<GetAllLists200Response> localVarResp = getAllListsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all lists
     * @return ApiResponse&lt;GetAllLists200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all lists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllLists200Response> getAllListsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllListsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAllLists200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all lists
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all lists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllListsAsync(final ApiCallback<GetAllLists200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllListsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAllLists200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpecificList
     * @param listId ID of the list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificListCall(Integer listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lists/{listId}"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificListValidateBeforeCall(Integer listId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = getSpecificListCall(listId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return specific list
     * @param listId ID of the list (required)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public ModelList getSpecificList(Integer listId) throws ApiException {
        ApiResponse<ModelList> localVarResp = getSpecificListWithHttpInfo(listId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return specific list
     * @param listId ID of the list (required)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> getSpecificListWithHttpInfo(Integer listId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificListValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return specific list
     * @param listId ID of the list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned specific list </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificListAsync(Integer listId, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificListValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpecificList
     * @param listId ID of the list (required)
     * @param listRequestBody Update list body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecificListCall(Integer listId, ListRequestBody listRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listRequestBody;

        // create path and map variables
        String localVarPath = "/lists/{listId}"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecificListValidateBeforeCall(Integer listId, ListRequestBody listRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateSpecificList(Async)");
        }
        

        okhttp3.Call localVarCall = updateSpecificListCall(listId, listRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update specific list
     * @param listId ID of the list (required)
     * @param listRequestBody Update list body (optional)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public ModelList updateSpecificList(Integer listId, ListRequestBody listRequestBody) throws ApiException {
        ApiResponse<ModelList> localVarResp = updateSpecificListWithHttpInfo(listId, listRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Update specific list
     * @param listId ID of the list (required)
     * @param listRequestBody Update list body (optional)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> updateSpecificListWithHttpInfo(Integer listId, ListRequestBody listRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSpecificListValidateBeforeCall(listId, listRequestBody, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update specific list
     * @param listId ID of the list (required)
     * @param listRequestBody Update list body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated specific list </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> List not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpecificListAsync(Integer listId, ListRequestBody listRequestBody, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecificListValidateBeforeCall(listId, listRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
