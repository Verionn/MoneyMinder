/*
 * MoneyMinder - Rest api
 * Api for MoneyMinder project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Category;
import org.openapitools.client.model.CategoryRequestBody;
import org.openapitools.client.model.GetCategories200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCategory
     * @param categoryRequestBody Create a new category (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created new category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryCall(CategoryRequestBody categoryRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoryRequestBody;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCategoryValidateBeforeCall(CategoryRequestBody categoryRequestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCategoryCall(categoryRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * create new category
     * @param categoryRequestBody Create a new category (optional)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created new category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public List<Category> addCategory(CategoryRequestBody categoryRequestBody) throws ApiException {
        ApiResponse<List<Category>> localVarResp = addCategoryWithHttpInfo(categoryRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * create new category
     * @param categoryRequestBody Create a new category (optional)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created new category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Category>> addCategoryWithHttpInfo(CategoryRequestBody categoryRequestBody) throws ApiException {
        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(categoryRequestBody, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * create new category
     * @param categoryRequestBody Create a new category (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created new category </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryAsync(CategoryRequestBody categoryRequestBody, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(categoryRequestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategory
     * @param categoryId ID of the category (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteCategory(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCategoryCall(categoryId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete specific category
     * @param categoryId ID of the category (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCategory(Integer categoryId) throws ApiException {
        deleteCategoryWithHttpInfo(categoryId);
    }

    /**
     * 
     * Delete specific category
     * @param categoryId ID of the category (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCategoryWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete specific category
     * @param categoryId ID of the category (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryAsync(Integer categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all available categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCategoriesCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all available categories
     * @return GetCategories200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all available categories </td><td>  -  </td></tr>
     </table>
     */
    public GetCategories200Response getCategories() throws ApiException {
        ApiResponse<GetCategories200Response> localVarResp = getCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all available categories
     * @return ApiResponse&lt;GetCategories200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all available categories </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCategories200Response> getCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetCategories200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all available categories
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all available categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesAsync(final ApiCallback<GetCategories200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetCategories200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpecificCategory
     * @param categoryId ID of the category (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned specific category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificCategoryCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificCategoryValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getSpecificCategory(Async)");
        }
        

        okhttp3.Call localVarCall = getSpecificCategoryCall(categoryId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get specific category
     * @param categoryId ID of the category (required)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned specific category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public Category getSpecificCategory(Integer categoryId) throws ApiException {
        ApiResponse<Category> localVarResp = getSpecificCategoryWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get specific category
     * @param categoryId ID of the category (required)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned specific category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category> getSpecificCategoryWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificCategoryValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get specific category
     * @param categoryId ID of the category (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned specific category </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecificCategoryAsync(Integer categoryId, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificCategoryValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategory
     * @param categoryId ID of the category (required)
     * @param categoryRequestBody Update category body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryCall(Integer categoryId, CategoryRequestBody categoryRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoryRequestBody;

        // create path and map variables
        String localVarPath = "/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryValidateBeforeCall(Integer categoryId, CategoryRequestBody categoryRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategory(Async)");
        }
        

        okhttp3.Call localVarCall = updateCategoryCall(categoryId, categoryRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update category
     * @param categoryId ID of the category (required)
     * @param categoryRequestBody Update category body (optional)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public Category updateCategory(Integer categoryId, CategoryRequestBody categoryRequestBody) throws ApiException {
        ApiResponse<Category> localVarResp = updateCategoryWithHttpInfo(categoryId, categoryRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Update category
     * @param categoryId ID of the category (required)
     * @param categoryRequestBody Update category body (optional)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category> updateCategoryWithHttpInfo(Integer categoryId, CategoryRequestBody categoryRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryId, categoryRequestBody, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update category
     * @param categoryId ID of the category (required)
     * @param categoryRequestBody Update category body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Category updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Wrong request body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryAsync(Integer categoryId, CategoryRequestBody categoryRequestBody, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryId, categoryRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
