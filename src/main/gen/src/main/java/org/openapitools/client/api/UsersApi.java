/*
 * MoneyMinder - Rest api
 * Api for MoneyMinder project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChangePasswordRequestBody;
import org.openapitools.client.model.ConfirmResetPasswordRequestBody;
import org.openapitools.client.model.CreateUserRequestBody;
import org.openapitools.client.model.LoginUserRequestBody;
import org.openapitools.client.model.ResetPasswordRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePassword
     * @param changePasswordRequestBody new password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changed password successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(ChangePasswordRequestBody changePasswordRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequestBody;

        // create path and map variables
        String localVarPath = "/users/change-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(ChangePasswordRequestBody changePasswordRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'changePasswordRequestBody' is set
        if (changePasswordRequestBody == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequestBody' when calling changePassword(Async)");
        }
        

        okhttp3.Call localVarCall = changePasswordCall(changePasswordRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * change password for user
     * @param changePasswordRequestBody new password (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changed password successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public void changePassword(ChangePasswordRequestBody changePasswordRequestBody) throws ApiException {
        changePasswordWithHttpInfo(changePasswordRequestBody);
    }

    /**
     * 
     * change password for user
     * @param changePasswordRequestBody new password (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changed password successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(ChangePasswordRequestBody changePasswordRequestBody) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * change password for user
     * @param changePasswordRequestBody new password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changed password successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(ChangePasswordRequestBody changePasswordRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmResetPassword
     * @param resetPasswordToken Reset password token (required)
     * @param confirmResetPasswordRequestBody new password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully set a new password for user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> password is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Token is expired or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmResetPasswordCall(String resetPasswordToken, ConfirmResetPasswordRequestBody confirmResetPasswordRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmResetPasswordRequestBody;

        // create path and map variables
        String localVarPath = "/users/confirm-reset-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resetPasswordToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResetPasswordToken", resetPasswordToken));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmResetPasswordValidateBeforeCall(String resetPasswordToken, ConfirmResetPasswordRequestBody confirmResetPasswordRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resetPasswordToken' is set
        if (resetPasswordToken == null) {
            throw new ApiException("Missing the required parameter 'resetPasswordToken' when calling confirmResetPassword(Async)");
        }
        
        // verify the required parameter 'confirmResetPasswordRequestBody' is set
        if (confirmResetPasswordRequestBody == null) {
            throw new ApiException("Missing the required parameter 'confirmResetPasswordRequestBody' when calling confirmResetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = confirmResetPasswordCall(resetPasswordToken, confirmResetPasswordRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * set a new password for user
     * @param resetPasswordToken Reset password token (required)
     * @param confirmResetPasswordRequestBody new password (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully set a new password for user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> password is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Token is expired or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void confirmResetPassword(String resetPasswordToken, ConfirmResetPasswordRequestBody confirmResetPasswordRequestBody) throws ApiException {
        confirmResetPasswordWithHttpInfo(resetPasswordToken, confirmResetPasswordRequestBody);
    }

    /**
     * 
     * set a new password for user
     * @param resetPasswordToken Reset password token (required)
     * @param confirmResetPasswordRequestBody new password (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully set a new password for user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> password is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Token is expired or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmResetPasswordWithHttpInfo(String resetPasswordToken, ConfirmResetPasswordRequestBody confirmResetPasswordRequestBody) throws ApiException {
        okhttp3.Call localVarCall = confirmResetPasswordValidateBeforeCall(resetPasswordToken, confirmResetPasswordRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * set a new password for user
     * @param resetPasswordToken Reset password token (required)
     * @param confirmResetPasswordRequestBody new password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully set a new password for user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> password is invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Token is expired or does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmResetPasswordAsync(String resetPasswordToken, ConfirmResetPasswordRequestBody confirmResetPasswordRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmResetPasswordValidateBeforeCall(resetPasswordToken, confirmResetPasswordRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginUser
     * @param loginUserRequestBody User details to login to the account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User with that email does not exists </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserCall(LoginUserRequestBody loginUserRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loginUserRequestBody;

        // create path and map variables
        String localVarPath = "/users/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginUserValidateBeforeCall(LoginUserRequestBody loginUserRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loginUserRequestBody' is set
        if (loginUserRequestBody == null) {
            throw new ApiException("Missing the required parameter 'loginUserRequestBody' when calling loginUser(Async)");
        }
        

        okhttp3.Call localVarCall = loginUserCall(loginUserRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * login user
     * @param loginUserRequestBody User details to login to the account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User with that email does not exists </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public void loginUser(LoginUserRequestBody loginUserRequestBody) throws ApiException {
        loginUserWithHttpInfo(loginUserRequestBody);
    }

    /**
     * 
     * login user
     * @param loginUserRequestBody User details to login to the account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User with that email does not exists </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> loginUserWithHttpInfo(LoginUserRequestBody loginUserRequestBody) throws ApiException {
        okhttp3.Call localVarCall = loginUserValidateBeforeCall(loginUserRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * login user
     * @param loginUserRequestBody User details to login to the account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in successfully </td><td>  * JsonWebToken -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User with that email does not exists </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User couldn&#39;t be authenticated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginUserAsync(LoginUserRequestBody loginUserRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginUserValidateBeforeCall(loginUserRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerUser
     * @param createUserRequestBody User details to register new user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserCall(CreateUserRequestBody createUserRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequestBody;

        // create path and map variables
        String localVarPath = "/users/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUserValidateBeforeCall(CreateUserRequestBody createUserRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createUserRequestBody' is set
        if (createUserRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createUserRequestBody' when calling registerUser(Async)");
        }
        

        okhttp3.Call localVarCall = registerUserCall(createUserRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Register user
     * @param createUserRequestBody User details to register new user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
     </table>
     */
    public void registerUser(CreateUserRequestBody createUserRequestBody) throws ApiException {
        registerUserWithHttpInfo(createUserRequestBody);
    }

    /**
     * 
     * Register user
     * @param createUserRequestBody User details to register new user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registerUserWithHttpInfo(CreateUserRequestBody createUserRequestBody) throws ApiException {
        okhttp3.Call localVarCall = registerUserValidateBeforeCall(createUserRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Register user
     * @param createUserRequestBody User details to register new user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserAsync(CreateUserRequestBody createUserRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUserValidateBeforeCall(createUserRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetPassword
     * @param resetPasswordRequestBody reset password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully send message with link to reset password </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordCall(ResetPasswordRequestBody resetPasswordRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetPasswordRequestBody;

        // create path and map variables
        String localVarPath = "/users/reset-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetPasswordValidateBeforeCall(ResetPasswordRequestBody resetPasswordRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'resetPasswordRequestBody' is set
        if (resetPasswordRequestBody == null) {
            throw new ApiException("Missing the required parameter 'resetPasswordRequestBody' when calling resetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = resetPasswordCall(resetPasswordRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * reset password for user
     * @param resetPasswordRequestBody reset password (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully send message with link to reset password </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void resetPassword(ResetPasswordRequestBody resetPasswordRequestBody) throws ApiException {
        resetPasswordWithHttpInfo(resetPasswordRequestBody);
    }

    /**
     * 
     * reset password for user
     * @param resetPasswordRequestBody reset password (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully send message with link to reset password </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resetPasswordWithHttpInfo(ResetPasswordRequestBody resetPasswordRequestBody) throws ApiException {
        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(resetPasswordRequestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * reset password for user
     * @param resetPasswordRequestBody reset password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successfully send message with link to reset password </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordAsync(ResetPasswordRequestBody resetPasswordRequestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(resetPasswordRequestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
