/*
 * MoneyMinder - Rest api
 * Api for MoneyMinder project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PurchasedItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PurchasedItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PurchasedItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getLastNPurchasedItems
     * @param amountOfItems amount of items (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of items </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastNPurchasedItemsCall(Integer amountOfItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchased-items/items/{amountOfItems}"
            .replaceAll("\\{" + "amountOfItems" + "\\}", localVarApiClient.escapeString(amountOfItems.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastNPurchasedItemsValidateBeforeCall(Integer amountOfItems, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'amountOfItems' is set
        if (amountOfItems == null) {
            throw new ApiException("Missing the required parameter 'amountOfItems' when calling getLastNPurchasedItems(Async)");
        }
        

        okhttp3.Call localVarCall = getLastNPurchasedItemsCall(amountOfItems, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get last N purchased items
     * @param amountOfItems amount of items (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of items </td><td>  -  </td></tr>
     </table>
     */
    public void getLastNPurchasedItems(Integer amountOfItems) throws ApiException {
        getLastNPurchasedItemsWithHttpInfo(amountOfItems);
    }

    /**
     * 
     * Get last N purchased items
     * @param amountOfItems amount of items (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of items </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLastNPurchasedItemsWithHttpInfo(Integer amountOfItems) throws ApiException {
        okhttp3.Call localVarCall = getLastNPurchasedItemsValidateBeforeCall(amountOfItems, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get last N purchased items
     * @param amountOfItems amount of items (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of items </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastNPurchasedItemsAsync(Integer amountOfItems, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastNPurchasedItemsValidateBeforeCall(amountOfItems, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLastPurchasedItemsFromList
     * @param listId List id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong list id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastPurchasedItemsFromListCall(Integer listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchased-items/lists/{listId}"
            .replaceAll("\\{" + "listId" + "\\}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastPurchasedItemsFromListValidateBeforeCall(Integer listId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getLastPurchasedItemsFromList(Async)");
        }
        

        okhttp3.Call localVarCall = getLastPurchasedItemsFromListCall(listId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return purchased items from list
     * @param listId List id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong list id </td><td>  -  </td></tr>
     </table>
     */
    public void getLastPurchasedItemsFromList(Integer listId) throws ApiException {
        getLastPurchasedItemsFromListWithHttpInfo(listId);
    }

    /**
     * 
     * Return purchased items from list
     * @param listId List id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong list id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLastPurchasedItemsFromListWithHttpInfo(Integer listId) throws ApiException {
        okhttp3.Call localVarCall = getLastPurchasedItemsFromListValidateBeforeCall(listId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Return purchased items from list
     * @param listId List id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong list id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastPurchasedItemsFromListAsync(Integer listId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastPurchasedItemsFromListValidateBeforeCall(listId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchasedItemsByCategoryId
     * @param categoryId ID of the category (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsByCategoryIdCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchased-items/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchasedItemsByCategoryIdValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getPurchasedItemsByCategoryId(Async)");
        }
        

        okhttp3.Call localVarCall = getPurchasedItemsByCategoryIdCall(categoryId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get purchased items by categoryId
     * @param categoryId ID of the category (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public void getPurchasedItemsByCategoryId(Integer categoryId) throws ApiException {
        getPurchasedItemsByCategoryIdWithHttpInfo(categoryId);
    }

    /**
     * 
     * Get purchased items by categoryId
     * @param categoryId ID of the category (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPurchasedItemsByCategoryIdWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = getPurchasedItemsByCategoryIdValidateBeforeCall(categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get purchased items by categoryId
     * @param categoryId ID of the category (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsByCategoryIdAsync(Integer categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchasedItemsByCategoryIdValidateBeforeCall(categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchasedItemsInNDays
     * @param days amount od days (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsInNDaysCall(Integer days, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchased-items/days/{days}"
            .replaceAll("\\{" + "days" + "\\}", localVarApiClient.escapeString(days.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchasedItemsInNDaysValidateBeforeCall(Integer days, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'days' is set
        if (days == null) {
            throw new ApiException("Missing the required parameter 'days' when calling getPurchasedItemsInNDays(Async)");
        }
        

        okhttp3.Call localVarCall = getPurchasedItemsInNDaysCall(days, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get purchased items in N Days
     * @param days amount od days (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public void getPurchasedItemsInNDays(Integer days) throws ApiException {
        getPurchasedItemsInNDaysWithHttpInfo(days);
    }

    /**
     * 
     * Get purchased items in N Days
     * @param days amount od days (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPurchasedItemsInNDaysWithHttpInfo(Integer days) throws ApiException {
        okhttp3.Call localVarCall = getPurchasedItemsInNDaysValidateBeforeCall(days, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get purchased items in N Days
     * @param days amount od days (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsInNDaysAsync(Integer days, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchasedItemsInNDaysValidateBeforeCall(days, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchasedItemsInNDaysByCategory
     * @param categoryId ID of the category (required)
     * @param days amount of days (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items from n Days </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsInNDaysByCategoryCall(Integer categoryId, Integer days, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchased-items/categories/{categoryId}/days/{days}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()))
            .replaceAll("\\{" + "days" + "\\}", localVarApiClient.escapeString(days.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchasedItemsInNDaysByCategoryValidateBeforeCall(Integer categoryId, Integer days, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getPurchasedItemsInNDaysByCategory(Async)");
        }
        
        // verify the required parameter 'days' is set
        if (days == null) {
            throw new ApiException("Missing the required parameter 'days' when calling getPurchasedItemsInNDaysByCategory(Async)");
        }
        

        okhttp3.Call localVarCall = getPurchasedItemsInNDaysByCategoryCall(categoryId, days, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get purchased items in last N days from category
     * @param categoryId ID of the category (required)
     * @param days amount of days (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items from n Days </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public void getPurchasedItemsInNDaysByCategory(Integer categoryId, Integer days) throws ApiException {
        getPurchasedItemsInNDaysByCategoryWithHttpInfo(categoryId, days);
    }

    /**
     * 
     * Get purchased items in last N days from category
     * @param categoryId ID of the category (required)
     * @param days amount of days (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items from n Days </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPurchasedItemsInNDaysByCategoryWithHttpInfo(Integer categoryId, Integer days) throws ApiException {
        okhttp3.Call localVarCall = getPurchasedItemsInNDaysByCategoryValidateBeforeCall(categoryId, days, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get purchased items in last N days from category
     * @param categoryId ID of the category (required)
     * @param days amount of days (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned purchased items from n Days </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Category not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Wrong amount of days </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsInNDaysByCategoryAsync(Integer categoryId, Integer days, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchasedItemsInNDaysByCategoryValidateBeforeCall(categoryId, days, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPurchasedItemsNamesByPrefix
     * @param prefix prefix (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsNamesByPrefixCall(String prefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchased-items/names/{prefix}"
            .replaceAll("\\{" + "prefix" + "\\}", localVarApiClient.escapeString(prefix.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPurchasedItemsNamesByPrefixValidateBeforeCall(String prefix, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling getPurchasedItemsNamesByPrefix(Async)");
        }
        

        okhttp3.Call localVarCall = getPurchasedItemsNamesByPrefixCall(prefix, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get purchased items names by prefix
     * @param prefix prefix (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
     </table>
     */
    public void getPurchasedItemsNamesByPrefix(String prefix) throws ApiException {
        getPurchasedItemsNamesByPrefixWithHttpInfo(prefix);
    }

    /**
     * 
     * Get purchased items names by prefix
     * @param prefix prefix (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPurchasedItemsNamesByPrefixWithHttpInfo(String prefix) throws ApiException {
        okhttp3.Call localVarCall = getPurchasedItemsNamesByPrefixValidateBeforeCall(prefix, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get purchased items names by prefix
     * @param prefix prefix (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned names </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPurchasedItemsNamesByPrefixAsync(String prefix, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPurchasedItemsNamesByPrefixValidateBeforeCall(prefix, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
