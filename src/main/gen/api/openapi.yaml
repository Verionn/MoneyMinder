openapi: 3.0.0
info:
  description: Api for MoneyMinder project
  title: MoneyMinder - Rest api
  version: 1.0.0
servers:
- url: /
tags:
- description: All available requests related to categories
  name: categories
- description: All available requests related to lists
  name: lists
- description: All available requests related to items
  name: items
- description: All available requests related to purchased items
  name: purchasedItems
- description: All available request related to users
  name: users
paths:
  /categories:
    get:
      description: Returns all available categories
      operationId: getCategories
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCategories_200_response'
          description: Returned all available categories
      security:
      - bearerAuth: []
      tags:
      - categories
      x-accepts: application/json
    post:
      description: create new category
      operationId: addCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestBody'
        description: Create a new category
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Category'
                type: array
          description: Created new category
        "404":
          description: Wrong request body
      security:
      - bearerAuth: []
      tags:
      - categories
      x-content-type: application/json
      x-accepts: application/json
  /categories/{categoryId}:
    delete:
      description: Delete specific category
      operationId: deleteCategory
      parameters:
      - description: ID of the category
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Category deleted successfully
        "404":
          description: Category not found
      security:
      - bearerAuth: []
      tags:
      - categories
      x-accepts: application/json
    get:
      description: Get specific category
      operationId: getSpecificCategory
      parameters:
      - description: ID of the category
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: Returned specific category
        "400":
          description: Category not found
        "404":
          description: Wrong request body
      security:
      - bearerAuth: []
      tags:
      - categories
      x-accepts: application/json
    put:
      description: Update category
      operationId: updateCategory
      parameters:
      - description: ID of the category
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequestBody'
        description: Update category body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: Category updated successfully
        "400":
          description: Category not found
        "404":
          description: Wrong request body
      security:
      - bearerAuth: []
      tags:
      - categories
      x-content-type: application/json
      x-accepts: application/json
  /lists:
    get:
      description: Get all lists
      operationId: getAllLists
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllLists_200_response'
          description: Returned all lists
      security:
      - bearerAuth: []
      tags:
      - lists
      x-accepts: application/json
    post:
      description: Create new list
      operationId: createNewList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Successfully created new list
        "400":
          description: Bad request body
      security:
      - bearerAuth: []
      tags:
      - lists
      x-accepts: application/json
  /lists/{listId}:
    delete:
      description: Delete specific list
      operationId: deleteSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully deleted specific list
        "404":
          description: List not found
      security:
      - bearerAuth: []
      tags:
      - lists
      x-accepts: application/json
    get:
      description: Return specific list
      operationId: getSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Successfully returned specific list
        "404":
          description: List not found
      security:
      - bearerAuth: []
      tags:
      - lists
      x-accepts: application/json
    put:
      description: Update specific list
      operationId: updateSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRequestBody'
        description: Update list body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Successfully updated specific list
        "400":
          description: Wrong request body
        "404":
          description: List not found
      security:
      - bearerAuth: []
      tags:
      - lists
      x-content-type: application/json
      x-accepts: application/json
  /lists/{listId}/items:
    get:
      description: Return all items from specific list
      operationId: getAllItemsFromSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllItemsFromSpecificList_200_response'
          description: Successfully returned all items from specific list
        "404":
          description: List not found
      security:
      - bearerAuth: []
      tags:
      - items
      x-accepts: application/json
    post:
      description: Add new item to specific list
      operationId: addNewItemToSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequestBody'
        description: Add new item body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Successfully added new item to specific list
        "400":
          description: Wrong new item request body
        "404":
          description: List or category not found
      security:
      - bearerAuth: []
      tags:
      - items
      x-content-type: application/json
      x-accepts: application/json
  /lists/{listId}/items/{itemId}:
    delete:
      description: Delete specific item from specific list
      operationId: deleteSpecificItemFromSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      - description: ID of the item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully deleted item
        "404":
          description: List or Item not found
      security:
      - bearerAuth: []
      tags:
      - items
      x-accepts: application/json
    get:
      description: Return specific item from specific list
      operationId: returnSpecificItemFromSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      - description: ID of the item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Successfully returned item
        "404":
          description: List or Item not found
      security:
      - bearerAuth: []
      tags:
      - items
      x-accepts: application/json
    put:
      description: Update specific item from specific list
      operationId: UpdateSpecificItemFromSpecificList
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      - description: ID of the item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequestBody'
        description: Update item body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Successfully updated item
        "400":
          description: Wrong request body
        "404":
          description: List or Item not found
      security:
      - bearerAuth: []
      tags:
      - items
      x-content-type: application/json
      x-accepts: application/json
  /lists/{listId}/items/{itemId}/purchased:
    post:
      description: Mark item as purchased
      operationId: markItemAsPurchased
      parameters:
      - description: ID of the list
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      - description: ID of the item
        explode: false
        in: path
        name: itemId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully purchased item - item has been moved to another
            table
        "404":
          description: List or Item not found
      security:
      - bearerAuth: []
      tags:
      - items
      x-accepts: application/json
  /purchased-items/categories/{categoryId}/days/{days}:
    get:
      description: Get purchased items in last N days from category
      operationId: getPurchasedItemsInNDaysByCategory
      parameters:
      - description: ID of the category
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: integer
        style: simple
      - description: amount of days
        explode: false
        in: path
        name: days
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully returned purchased items from n Days
        "404":
          description: Category not found
        "400":
          description: Wrong amount of days
      security:
      - bearerAuth: []
      tags:
      - purchasedItems
      x-accepts: application/json
  /purchased-items/categories/{categoryId}:
    get:
      description: Get purchased items by categoryId
      operationId: getPurchasedItemsByCategoryId
      parameters:
      - description: ID of the category
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully returned purchased items
        "404":
          description: Category not found
      security:
      - bearerAuth: []
      tags:
      - purchasedItems
      x-accepts: application/json
  /purchased-items/names/{prefix}:
    get:
      description: Get purchased items names by prefix
      operationId: getPurchasedItemsNamesByPrefix
      parameters:
      - description: prefix
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successfully returned names
      security:
      - bearerAuth: []
      tags:
      - purchasedItems
      x-accepts: application/json
  /purchased-items/days/{days}:
    get:
      description: Get purchased items in N Days
      operationId: getPurchasedItemsInNDays
      parameters:
      - description: amount od days
        explode: false
        in: path
        name: days
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully returned names
        "400":
          description: Wrong amount of days
      security:
      - bearerAuth: []
      tags:
      - purchasedItems
      x-accepts: application/json
  /purchased-items/items/{amountOfItems}:
    get:
      description: Get last N purchased items
      operationId: getLastNPurchasedItems
      parameters:
      - description: amount of items
        explode: false
        in: path
        name: amountOfItems
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully returned items
        "400":
          description: Wrong amount of items
      security:
      - bearerAuth: []
      tags:
      - purchasedItems
      x-accepts: application/json
  /purchased-items/lists/{listId}:
    get:
      description: Return purchased items from list
      operationId: getLastPurchasedItemsFromList
      parameters:
      - description: List id
        explode: false
        in: path
        name: listId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Successfully returned items
        "400":
          description: Wrong list id
      security:
      - bearerAuth: []
      tags:
      - purchasedItems
      x-accepts: application/json
  /users/register:
    post:
      description: Register user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestBody'
        description: User details to register new user
        required: true
      responses:
        "201":
          description: Successfully registered user
        "400":
          description: Bad request
        "409":
          description: User already exists
      tags:
      - users
      x-content-type: application/json
      x-accepts: application/json
  /users/login:
    post:
      description: login user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequestBody'
        description: User details to login to the account
        required: true
      responses:
        "200":
          description: logged in successfully
          headers:
            JsonWebToken:
              $ref: '#/components/headers/JsonWebToken'
        "400":
          description: Bad request
        "401":
          description: User with that email does not exists
        "403":
          description: User couldn't be authenticated
      tags:
      - users
      x-content-type: application/json
      x-accepts: application/json
  /users/change-password:
    put:
      description: change password for user
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequestBody'
        description: new password
        required: true
      responses:
        "200":
          description: changed password successfully
          headers:
            JsonWebToken:
              $ref: '#/components/headers/JsonWebToken'
        "400":
          description: Bad request
        "404":
          description: User not found
        "403":
          description: User couldn't be authenticated
      tags:
      - users
      x-content-type: application/json
      x-accepts: application/json
  /users/reset-password:
    post:
      description: reset password for user
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestBody'
        description: reset password
        required: true
      responses:
        "200":
          description: successfully send message with link to reset password
        "400":
          description: Bad request
        "404":
          description: User not found
      tags:
      - users
      x-content-type: application/json
      x-accepts: application/json
  /users/confirm-reset-password:
    put:
      description: set a new password for user
      operationId: confirmResetPassword
      parameters:
      - description: Reset password token
        explode: true
        in: query
        name: ResetPasswordToken
        required: true
        schema:
          example: 62eiredl-ORKa-4930-9831-eec546b91830
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmResetPasswordRequestBody'
        description: new password
        required: true
      responses:
        "200":
          description: successfully set a new password for user
        "400":
          description: password is invalid
        "404":
          description: Token is expired or does not exist
      tags:
      - users
      x-content-type: application/json
      x-accepts: application/json
components:
  headers:
    JsonWebToken:
      explode: false
      schema:
        description: JsonWebToken
        example: eyJhbGciOiJIUzI1NiJ9 .eyJzdWIiOiJ0ZXN0b3d5Lm1haWxAZ21haWwuY29tIiwiaWF0IjoxN
          zAzODk1OTg0LCJleHAiOjE3MDM5MTc1ODR9 .Ubh9XvZvp9qbu624AtiRBPXj1BzscGVC1MyqfHL5s60
        format: application/jwt
        pattern: "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]+)$"
        type: string
      style: simple
  schemas:
    Category:
      example:
        name: Food
        id: 1
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Food
          type: string
      required:
      - name
      type: object
    List:
      example:
        name: Weekly
        id: 1
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Weekly
          type: string
      required:
      - name
      type: object
    Item:
      example:
        listId: 4
        amount: 3
        price: 7.45
        name: Cola
        weight: 150
        timeCreated: 2023-11-27T00:00:00.000+00:00
        id: 2
        categoryId: 3
      properties:
        id:
          example: 2
          format: int64
          type: integer
        categoryId:
          example: 3
          format: int64
          type: integer
        listId:
          example: 4
          format: int64
          type: integer
        name:
          example: Cola
          type: string
        amount:
          example: 3
          format: int64
          type: integer
        price:
          example: 7.45
          format: double
          type: number
        weight:
          example: 150
          format: int64
          type: integer
        timeCreated:
          example: 2023-11-27
          format: date
          type: string
      required:
      - name
      type: object
    CategoryRequestBody:
      example:
        name: Sweets
      properties:
        name:
          example: Sweets
          type: string
      required:
      - name
      type: object
    ListRequestBody:
      example:
        name: Daily
      properties:
        name:
          example: Daily
          type: string
      required:
      - name
      type: object
    ItemRequestBody:
      example:
        listId: 3
        amount: 5
        price: 4.3
        name: Cola
        weight: 350
        categoryId: 2
      properties:
        categoryId:
          example: 2
          format: int64
          type: integer
        listId:
          example: 3
          format: int64
          type: integer
        name:
          example: Cola
          type: string
        amount:
          example: 5
          format: int64
          type: integer
        price:
          example: 4.3
          format: double
          type: number
        weight:
          example: 350
          format: int64
          type: integer
      required:
      - name
      type: object
    CreateItemRequestBody:
      example:
        amount: 5
        price: 4.3
        name: Cola
        weight: 350
        categoryId: 2
      properties:
        categoryId:
          example: 2
          format: int64
          type: integer
        name:
          example: Cola
          type: string
        amount:
          example: 5
          format: int64
          type: integer
        price:
          example: 4.3
          format: double
          type: number
        weight:
          example: 350
          format: int64
          type: integer
      required:
      - name
      type: object
    CreateUserRequestBody:
      example:
        password: K#lasdf&82z
        name: verion
        email: verion@gmail.com
      properties:
        name:
          example: verion
          type: string
        password:
          example: K#lasdf&82z
          type: string
        email:
          example: verion@gmail.com
          type: string
      required:
      - email
      - name
      - password
      type: object
    LoginUserRequestBody:
      example:
        password: K#lasdf&82z
        email: verion@gmail.com
      properties:
        email:
          example: verion@gmail.com
          type: string
        password:
          example: K#lasdf&82z
          type: string
      required:
      - email
      - password
      type: object
    ChangePasswordRequestBody:
      example:
        repeatOldPassword: "123456"
        oldPassword: "123456"
        newPassword: qwerty
      properties:
        oldPassword:
          example: "123456"
          type: string
        repeatOldPassword:
          example: "123456"
          type: string
        newPassword:
          example: qwerty
          type: string
      required:
      - newPassword
      - oldPassword
      - repeatOldPassword
      type: object
    ResetPasswordRequestBody:
      example:
        email: verion@gmail.com
      properties:
        email:
          example: verion@gmail.com
          type: string
      required:
      - email
      type: object
    ConfirmResetPasswordRequestBody:
      example:
        password: "1234567"
      properties:
        password:
          example: "1234567"
          type: string
      required:
      - new password
      type: object
    getCategories_200_response:
      example:
        categories:
        - name: Food
          id: 1
        - name: Food
          id: 1
      properties:
        categories:
          items:
            $ref: '#/components/schemas/Category'
          type: array
      type: object
    getAllLists_200_response:
      example:
        lists:
        - name: Weekly
          id: 1
        - name: Weekly
          id: 1
      properties:
        lists:
          items:
            $ref: '#/components/schemas/List'
          type: array
      type: object
    getAllItemsFromSpecificList_200_response:
      example:
        items:
        - listId: 4
          amount: 3
          price: 7.45
          name: Cola
          weight: 150
          timeCreated: 2023-11-27T00:00:00.000+00:00
          id: 2
          categoryId: 3
        - listId: 4
          amount: 3
          price: 7.45
          name: Cola
          weight: 150
          timeCreated: 2023-11-27T00:00:00.000+00:00
          id: 2
          categoryId: 3
      properties:
        items:
          items:
            $ref: '#/components/schemas/Item'
          type: array
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http

